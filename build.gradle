plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '2.25.0'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

application {
  mainModule = 'org.example.scdpro2'
  mainClass = 'org.example.scdpro2.Main'
}

javafx {
  version = '21'
  modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing' ]
}

dependencies {
  implementation('org.controlsfx:controlsfx:11.1.2')
  implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
    exclude(group: 'org.openjfx')
  }
  implementation('net.synedra:validatorfx:0.4.0') {
    exclude(group: 'org.openjfx')
  }
  implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')
  implementation('eu.hansolo:tilesfx:11.48') {
    exclude(group: 'org.openjfx')
  }
  implementation("com.fasterxml.jackson.core:jackson-databind:2.15.2") // Core library for JSON
  implementation("com.fasterxml.jackson.core:jackson-core:2.15.2")     // Core functionalities
  implementation("com.fasterxml.jackson.core:jackson-annotations:2.15.2") // Annotations support

  testImplementation ("org.testfx:testfx-core:4.0.16-alpha")
  testImplementation ("org.testfx:testfx-junit5:4.0.16-alpha")
  testImplementation ("org.assertj:assertj-core:3.24.2")

  // JUnit for unit testing
  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

  // Mockito for mocking dependencies
  testImplementation ("org.mockito:mockito-core:5.5.0")
}

test {
  useJUnitPlatform()}

jlink {
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'app'
  }
}

jlinkZip {
  group = 'distribution'
}

sourceSets {
  main {
    resources {
      srcDirs = ['src/main/resources']
    }
  }
}